<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">



<mapper namespace="com.itwillbs.mappers.performMapper"> 

   
	<!-- 실적등록에 작업지시 부분 -->
    <resultMap type="map" id="InstrLiMap">
    
	<!--     column= "디비열이름" property="멤버변수이름" -->
    <id column="id" property=""/>
    <result column="work_num" property="workNum"/>
    <result column="instr_id" property="instrId"/>
    <result column="line_cd" property="lineCd"/>
    <result column="line_nm" property="lineName"/>
    <result column="item_num" property="itemNum"/>
    <result column="item_nm" property="itemName"/>
    <result column="work_sts" property="workSts"/>
    <result column="work_dt" property="workDate"/>
    <result column="work_qty" property="workQty"/>
    <result column="ord_num" property="ordNum"/>
    <result column="clnt_nm" property="ClientName"/>
    <result column="pqty" property="pqty"/>
    <result column="Y" property="Y"/>
    <result column="N" property="N"/>
    
    </resultMap>
    
    <select id="getInstrLiMap" resultMap="InstrLiMap"> <!-- 처음에 조회되는 작업지시 리스트 -->
    select
    i.work_num, 
	i.instr_id, 
	i.line_cd, 
	i.line_nm, 
	i.item_num, 
	i.item_nm, 
	i.work_sts, 
	i.work_dt, 
	i.work_qty, 
	i.ord_num,
	i.clnt_nm,
    sum(ifnull(p.prfrm_qty,0)) as "pqty",
    sum(if(p.gb_yn='Y',p.prfrm_qty,0)) as "Y",
    sum(if(p.gb_yn='N',p.prfrm_qty,0)) as "N"
    from prfrm1_view i left join work_prfrm p
	on p.instr_id = i.instr_id
	group by i.instr_id
	order by i.instr_id desc
	limit #{startRow}, #{pageSize}
    </select>
    
    <select id="getSearchInstrLiMap" resultMap="InstrLiMap"> <!--  검색 작업지시 리스트 -->
    select
    i.work_num, 
	i.instr_id, 
	i.line_cd, 
	i.line_nm, 
	i.item_num, 
	i.item_nm, 
	i.work_sts, 
	i.work_dt, 
	i.work_qty, 
	i.ord_num,
	i.clnt_nm,
    sum(ifnull(p.prfrm_qty,0)) as "pqty",
    sum(if(p.gb_yn='Y',p.prfrm_qty,0)) as "Y",
    sum(if(p.gb_yn='N',p.prfrm_qty,0)) as "N"
    from prfrm1_view i left join work_prfrm p
	on p.instr_id = i.instr_id
	where i.line_nm like CONCAT('%', #{line}, '%') 
	<if test="sdate!='' and edate!=''">  <!-- 날짜 둘다 입력한 경우 경우 -->
	and
	i.work_dt between #{sdate} and #{edate} 	
	</if>
	<if test="sdate=='' and edate==''"> <!-- 날짜 입력하지 않은 경우 -->
	</if>	
	<if test="sdate!=''"> <!-- 시작날짜만 입력한 경우 -->
	and
	i.work_dt &gt;= #{sdate}
	</if>
	<if test="edate!=''"> <!-- 끝날짜만 입력한 경우 -->
	and
	i.work_dt &lt;= #{edate}
	</if>
	<choose>
	<when test="(ists1=='' and ists2=='' and ists3=='') or (ists1==null and ists2==null and ists3==null)">
	<!-- 지시상태 선택하지 않은 경우  -->
	</when>
	<otherwise>	<!-- 지시상태 선택한 경우 -->
	and
	(i.work_sts = #{ists1} or i.work_sts = #{ists2} or i.work_sts = #{ists3})
	</otherwise>
	</choose>
	and
	i.item_num like CONCAT('%', #{pcd}, '%') 
	group by i.instr_id
	order by i.instr_id desc
	limit #{startRow}, #{pageSize}
    </select>
    
    
   <select id="getInstrMap" resultMap="InstrLiMap"> <!-- 지시번호에 맞는 리스트 들고오기(화면에 출력되는 컬럼) -->
    select
    i.work_num,
	i.instr_id, 
	i.line_cd, 
	i.line_nm, 
	i.item_num, 
	i.item_nm, 
	i.work_sts, 
	i.work_dt, 
	i.work_qty, 
	i.ord_num,
	i.clnt_nm,
	sum(ifnull(p.prfrm_qty,0)) as "pqty",
    sum(if(p.gb_yn='Y',p.prfrm_qty,0)) as "Y",
    sum(if(p.gb_yn='N',p.prfrm_qty,0)) as "N"
	from prfrm1_view i left join work_prfrm p
	on p.instr_id = i.instr_id
	where i.instr_id = #{instrId}
    </select>
    
	
	<!-- 실적등록 부분 -->
    <resultMap type="map" id="PfLiMap">
    
	<!--     column= "디비열이름" property="멤버변수이름" -->
	<result column="work_num" property="workNum"/>
	<result column="instr_id" property="instrId"/>
	<result column="prfrm_id" property="performId"/>
    <result column="item_num" property="itemNum"/>
    <result column="item_nm" property="itemName"/>
    <result column="prfrm_dt" property="performDate"/>
    <result column="gb_yn" property="gbYn"/>
    <result column="prfrm_qty" property="performQty"/>
    <result column="db_rsns" property="dbReason"/>
    <result column="invnt_unit" property="invntUnit"/>
    <result column="insert_id" property="insertId"/>
    <result column="name" property="name"/>

    
    </resultMap>
    
    
    <select id="getPfLiMap" resultMap="PfLiMap"> <!-- 지시번호에 해당되는 실적 목록(화면단) 불러오기 -->
    select
    it.work_num,
    p.instr_id,
    p.prfrm_id,
    i.item_num, 
    i.item_nm,
    i.invnt_unit,
    p.prfrm_dt, 
    p.gb_yn, 
    p.prfrm_qty, 
    p.db_rsns,
    p.insert_id,
    u.name
    from item i join work_prfrm p
    on i.item_id = p.item_id
    join work_instr it
    on it.instr_id = p.instr_id
    join user u
    on u.id = p.insert_id
    where p.instr_id = #{instrId}
    order by p.prfrm_id desc
    </select>
    
    <select id="getInstr" resultType="com.itwillbs.work.domain.InstructDTO">
	select
	instr_id as instrId,
	line_id as lineId,
	ord_id as ordId,
	item_id as itemId,
	work_num as workNum,
	work_sts as workSts,
	work_dt as workDate,
	work_qty as workQty,
	insert_id as insertId,
	insert_dt as insertDate
	from work_instr
	where instr_id = #{instrId}
	</select>
   
    <insert id="insertPf"> <!-- 실적 등록 -->
    insert into work_prfrm
    (prfrm_id,
	instr_id,
	line_id,
	item_id, 
	prfrm_dt, 
	input_qty,
	gb_yn,
	prfrm_qty,
	db_rsns,
	note,
	insert_id,  
	insert_dt)
	values
	(#{performId},
	#{instrId},
	#{lineId},
	#{itemId},
	#{performDate},
	#{inputQty},
	#{gbYn},
	#{performQty},
	#{dbReason},
	#{note},
	#{insertId},
	#{insertDate})
    </insert>
   
   	<delete id="delPf"> <!-- 실적 삭제 -->
   	delete from work_prfrm
   	where prfrm_id = #{performId}
   	</delete>
   
    <select id="getPf" resultType="com.itwillbs.work.domain.PerformDTO">
	select
	prfrm_id as performId,
	instr_id as instrId,
	line_id as lineId,
	item_id as itemId,
	prfrm_dt as performDate,
	input_qty as inputQty,
	gb_yn as gbYn,
	prfrm_qty as performQty,
	db_rsns as dbReason,
	note as note,
	insert_id as insertId,
	insert_dt as insertDate,
	update_id as updateId,
	update_dt as updateDate
	from work_prfrm
	where prfrm_id = #{performId}
	</select>
   
   <update id="updatePf">
   update work_prfrm
   set prfrm_dt = #{performDate},
   prfrm_qty = #{performQty},
   gb_yn = #{gbYn},
   db_rsns = #{dbReason},
   note = #{note},
   update_id = #{updateId},
   update_dt = #{updateDate}
   where prfrm_id = #{performId}
   </update>
   
   <select id="itemlist" resultType="com.itwillbs.work.domain.ItemDTO">
   select
   item_id as itemId,
   item_num as itemNum,
   item_nm as itemName
   from item
   where 
   item_num like CONCAT('%', #{itemNum}, '%') and
   item_nm like CONCAT('%', #{itemName}, '%')
   order by item_num desc
   limit #{startRow}, #{pageSize}
   
   </select>
   
   
   <select id="countItemlist" resultType="java.lang.Integer">
   select
   count(*)
   from item
   <if test="itemNum!=null and itemName!=null">
   where 
   item_num like CONCAT('%', #{itemNum}, '%') and
   item_nm like CONCAT('%', #{itemName}, '%')
   </if>   
   </select>
   
   
   
   	<select id="countInstrLi" resultType="java.lang.Integer"> <!-- 작업지시리스트 개수 -->
    select
    count(*)
	from prfrm1_view
	<if test="(line != null and pcd != null and sdate != null and edate != null) or (ists1 != null or ists2 != null or ists3 != null)">
	where line_nm like CONCAT('%', #{line}, '%') 
	<if test="sdate!='' and edate!=''">  <!-- 날짜 둘다 입력한 경우 경우 -->
	and
	work_dt between #{sdate} and #{edate} 	
	</if>
	<if test="sdate=='' and edate==''"> <!-- 날짜 입력하지 않은 경우 -->
	</if>	
	<if test="sdate!=''"> <!-- 시작날짜만 입력한 경우 -->
	and
	work_dt &gt;= #{sdate}
	</if>
	<if test="edate!=''"> <!-- 끝날짜만 입력한 경우 -->
	and
	work_dt &lt;= #{edate}
	</if>
	<choose>
	<when test="(ists1=='' and ists2=='' and ists3=='') or (ists1==null and ists2==null and ists3==null)">
	<!-- 지시상태 선택하지 않은 경우  -->
	</when>
	<otherwise>	<!-- 지시상태 선택한 경우 -->
	and
	(work_sts = #{ists1} or work_sts = #{ists2} or work_sts = #{ists3})
	</otherwise>
	</choose>
	and
	item_num like CONCAT('%', #{pcd}, '%') 
	</if>
    </select>
    
    
    <!-- 실적조회 부분 -->
    <resultMap type="map" id="PerformLiMap">
    
	<!--     column= "디비열이름" property="멤버변수이름" -->
	<result column="prfrm_id" property="performId"/>
	<result column="prfrm_dt" property="performDate"/>
	<result column="line_nm" property="instrId"/>
	<result column="item_num" property="itemNum"/>
    <result column="item_nm" property="itemName"/>
    <result column="invnt_unit" property="invntUnit"/>
    <result column="Y" property="gbY"/>
    <result column="N" property="gbN"/>
    <result column="db_rsns" property="dbReason"/>
    <result column="work_num" property="workNum"/>
    <result column="ord_num" property="ordNum"/>
	<result column="clnt_nm" property="ClientName"/>
	<result column="name" property="name"/>

    </resultMap>
    
    <select id="PerformList" resultMap="PerformLiMap"> <!-- 생산실적 현황 생산실적 부분 -->
    select 
    p.prfrm_id,
    p.prfrm_dt, 
    l.line_nm, 
    i.item_num, 
    i.item_nm, 
    i.invnt_unit, 
    if(p.gb_yn='Y',p.prfrm_qty,null) as "Y",
	if(p.gb_yn='N',p.prfrm_qty,null) as "N", 
	p.db_rsns, 
	it.work_num, 
	om.ord_num, 
	c.clnt_nm,
	u.name
	from work_prfrm p join line l
	on p.line_id = l.line_id
	join item i
	on i.item_id = p.item_id
	join work_instr it
	on it.instr_id = p.instr_id
	join order_mng om
	on om.ord_id = it.ord_id
	join client c
	on om.clnt_id = c.clnt_id
	join user u
	on u.id = p.insert_id
	<if test="sdate!=null and edate!=null and line!=null and pcd!=null and worknum!=null">
	where line_nm like CONCAT('%', #{line}, '%') 
	<if test="sdate!='' and edate!=''">  <!-- 날짜 둘다 입력한 경우 경우 -->
	and
	prfrm_dt between #{sdate} and #{edate} 	
	</if>
	<if test="sdate=='' and edate==''"> <!-- 날짜 입력하지 않은 경우 -->
	</if>	
	<if test="sdate!=''"> <!-- 시작날짜만 입력한 경우 -->
	and
	prfrm_dt &gt;= #{sdate}
	</if>
	<if test="edate!=''"> <!-- 끝날짜만 입력한 경우 -->
	and
	prfrm_dt &lt;= #{edate}
	</if>
	and
	item_num like CONCAT('%', #{pcd}, '%')
	and
	work_num  like CONCAT('%', #{worknum}, '%')
	</if>
	order by prfrm_dt desc
    limit #{startRow}, #{pageSize}
	</select>
    
    <select id="countPerformLi" resultType="java.lang.Integer"> <!-- 생산실적 현황 생산실적 개수 -->
    select 
    count(*)
	from work_prfrm p join line l
	on p.line_id = l.line_id
	join item i
	on i.item_id = p.item_id
	join work_instr it
	on it.instr_id = p.instr_id
	join order_mng om
	on om.ord_id = it.ord_id
	join client c
	on om.clnt_id = c.clnt_id
	<if test="sdate!=null and edate!=null and line!=null and pcd!=null and worknum!=null">
	where line_nm like CONCAT('%', #{line}, '%') 
	<if test="sdate!='' and edate!=''">  <!-- 날짜 둘다 입력한 경우 경우 -->
	and
	prfrm_dt between #{sdate} and #{edate} 	
	</if>
	<if test="sdate=='' and edate==''"> <!-- 날짜 입력하지 않은 경우 -->
	</if>	
	<if test="sdate!=''"> <!-- 시작날짜만 입력한 경우 -->
	and
	prfrm_dt &gt;= #{sdate}
	</if>
	<if test="edate!=''"> <!-- 끝날짜만 입력한 경우 -->
	and
	prfrm_dt &lt;= #{edate}
	</if>
	and
	item_num like CONCAT('%', #{pcd}, '%')
	and
	work_num  like CONCAT('%', #{worknum}, '%')
	</if>
    </select>
    

    <!-- 소요량 부분 -->
    <resultMap type="map" id="ReqLiMap">
    
	<!-- column= "디비열이름" property="멤버변수이름" -->
	<result column="item_num" property="itemNum"/>
	<result column="item_nm" property="itemName"/>
	<result column="invnt_unit" property="inventUnit"/>
	<result column="req_amnt" property="reqAmnt"/>
    </resultMap>
    
    <select id="ReqList" resultMap="ReqLiMap">
    select 
    i.item_num, 
    i.item_nm, 
    i.invnt_unit, 
    r.req_amnt*p.prfrm_qty as req_amnt
	from item i join requirement r
	on r.c_item_id = i.item_id
	join work_prfrm p
	on p.item_id = r.p_item_id
	where p.prfrm_id = #{performId}
    </select>
    
    <select id="getReAmnt" resultType="com.itwillbs.mdm.domain.RequireDTO">
    select 
    r.p_item_id as pItemId,
	r.c_item_id as cItemId,
    r.req_amnt as reqAmnt
    from requirement r join item i
    on r.c_item_id = i.item_id
    where r.p_item_id = #{itemId};
    </select>

	<select id="checkY"  resultType="boolean">
    select
	count(*)
	from
	(select
	it.work_qty,
    sum(if(p.gb_yn='Y',p.prfrm_qty,0)) as "Y"
	from work_prfrm p join work_instr it
	on it.instr_id = p.instr_id
    where it.instr_id = #{instrId}
    group by it.instr_id
	having it.work_qty &lt;= sum(if(p.gb_yn='Y',p.prfrm_qty,0))) as table1
	</select>
	
	<update id="turnclose"> <!-- 지시상태 마감으로 변경 -->
	update work_instr
	set work_sts = '마감'
	where instr_id = #{instrId}
	</update>
	
	<update id="turnstart"> <!-- 지시상태 시작으로 변경 -->
	update work_instr
	set work_sts = '시작'
	where instr_id = #{instrId}
	</update>
	
	<update id="turninstr"> <!-- 지시상태 지시로 변경 -->
	update work_instr
	set work_sts = '지시'
	where instr_id = #{instrId}
	</update>
	
	<update id="updateStorage">
	update storage
	set item_count = item_count + #{performQty}
	where
	<if test="gbYn eq 'Y'.toString()"> <!-- 양품이면 2번창고(제품) -->
	stor_id = 2
	</if>
	<if test="gbYn eq 'N'.toString()"> <!-- 불량이면 3번창고(불량) -->
	stor_id = 3
	</if>
	<if test="gbYn eq 'J'.toString()"> <!-- (소요품)자재면 1번창고(자재) -->
	stor_id = 1
	</if>
	</update>
	
	<update id="updateStock">
	update stock
	set cur_stock = cur_stock + #{performQty}
	where
	item_id = #{itemId}
	</update>
	
	
	<update id="delStorage">
	update storage
	set item_count = item_count - #{performQty}
	where
	<if test="gbYn eq 'Y'.toString()"> <!-- 양품이면 2번창고(제품) -->
	stor_id = 2
	</if>
	<if test="gbYn eq 'N'.toString()"> <!-- 불량이면 3번창고(불량) -->
	stor_id = 3
	</if>
	<if test="gbYn eq 'J'.toString()"> <!-- (소요품)자재면 1번창고(자재) -->
	stor_id = 1
	</if>
	</update>
	
	<update id="delStock">
	update stock
	set cur_stock = cur_stock - #{performQty}
	where
	item_id = #{itemId}
	</update>
	
	<update id="updateLineY"> <!-- 라인 사용여부 Y -->
	UPDATE line
	SET use_yn = 'Y'
	</update>
	
	<update id="updateLineN"> <!-- 라인 사용여부 N -->
	UPDATE line
	SET use_yn = 'N'
	</update>

   
</mapper>